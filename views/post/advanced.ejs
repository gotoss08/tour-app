<% include ../partials/header_start.ejs %>
<link rel="stylesheet" href="/css/trix.css">
<link rel="stylesheet" href="/css/post-editor.css">
<script src="/js/trix.js"></script>
<script src="/js/striptags.js"></script>

<!-- alertifyjs -->
<script src="//cdn.jsdelivr.net/npm/alertifyjs@1.11.0/build/alertify.min.js"></script>
<link rel="stylesheet" href="//cdn.jsdelivr.net/npm/alertifyjs@1.11.0/build/css/alertify.min.css"/>
<link rel="stylesheet" href="//cdn.jsdelivr.net/npm/alertifyjs@1.11.0/build/css/themes/default.min.css"/>
<!-- notify -->
<script src="/js/notify.min.js"></script>
<% include ../partials/header_end.ejs %>

<div class="container mt-5 mb-5">
    <div class="row">
        <div class="col-12">
            <div class="text-muted mb-5">
                <h5>Поля, обозначенные <i class="fas fa-asterisk"></i>, обязательны для заполнения</h5>
            </div>

            <form action="/post/new/advanced" method="post" id="post-form">
                <div id="accordion"></div>
            </form>
        </div>
    </div>
    <hr>
    <div class="row mt-4">
        <div class="col-12 form-group">
            <button id="postSubmit" type="button" class="btn btn-success float-right" style="font-size: 16pt;"><%= __('post.submit') %></button>
        </div>
    </div>
</div>

<script type="text/javascript">

    /* Base accordion stuff */

    $('#postSubmit').click(() => {
        $('#post-form').submit();
    });

    const accordion = $('#accordion');

    addAccordionCard = (options) => {
        if(!options.element) options.element = accordion;
        if(!options.divide) options.divide = false;
        if(!options.cardHeaderClass) options.cardHeaderClass = '';
        if(!options.id) options.id = '';
        if(!options.postTitleHTML) options.postTitleHTML = '';

        let accordionChildCount = accordion.children().length;
        if (options.element != accordion) {
            accordionChildCount += options.element.children().length;
        }

        return options.element.append(`
            ${options.divide ? '<hr>' : ''}
            <div class="card" ${accordionChildCount === 0 ? 'id="main-card"' : ''} ${options.id ? 'id="card-' + options.id +'"' : ''}>
                <div class="card-header ${options.cardHeaderClass}" id="heading${accordionChildCount+1}">
                    <h5 class="mb-0">
                        <a class="btn btn-outline" data-toggle="collapse" data-target="#collapse${accordionChildCount+1}">
                            ${options.title}
                        </a>
                        ${options.postTitleHTML}
                    </h5>
                </div>

                <div id="collapse${accordionChildCount+1}" class="collapse ${accordionChildCount === 0 ? 'show' : ''}" data-parent="#${options.element.attr('id')}">
                    <div class="card-body">
                        ${options.body}
                    </div>
                </div>
            </div>
        `);
    };

    getDefaultTextarea = (name, placeholder='', required=false, id='') => {
        return `
            <div class="form-group">
                <input id="${id}" type="hidden" name="${name}">
                <trix-editor class="form-control post-body border-0" input="${id}" placeholder="${placeholder}"></trix-editor>
                <p><small class="text-muted"><%= __('post.body.editor.help') %></small></p>
            </div>
        `;
    };

    let introTitle = '* <%= __('post.title') %>';
    addAccordionCard({
        title: introTitle,
        body: `<div class="form-group">
                    <select id="country-select" class="custom-select mr-1" name="country" required autofocus>
                        <option value="" disabled selected hidden>* <%= __('post.country.select') %></option>
                        <% for(var i = 0; i < countries.length; i++) { %>
                        <% var country = countries[i]; %>
                        <option value="<%= country._id %>"><%= __(country.name) %></option>
                        <% } %>
                    </select>
                    <small id="post-country-select-error" class="form-text text-danger"></small>
                </div>
                <hr>

                <div class="form-group">
                    <input type="text" class="form-control post-title border-0" id="post-title-main" name="title" placeholder="* <%= __('post.title.placeholder') %>" required autocomplete="off">
                    <small id="post-title-main-error" class="form-text text-danger"></small>
                </div>
                <hr>

                <div class="form-group">
                    <input id="body-input" type="hidden" name="body">
                    <trix-editor id="post-body-main" class="form-control post-body border-0" input="body-input" placeholder="<%= __('post.body.placeholder') %>..."></trix-editor>
                    <small id="post-body-main-error" class="form-text text-danger"></small>
                    <p><small class="text-muted"><%= __('post.body.editor.help') %></small></p>
                </div>`,
        element: accordion,
        divide: false,
        cardHeaderClass: 'bg-warning'
    });

    /* topics */

    const topics = [];

    <% for(var i = 0; i < topics.length; i++) { %>
        <% var topic = topics[i]; %>
        topics.push({ name: '<%= topic._id %>' , title: '<%- topic.name %>' });
    <% } %>

    topics.forEach(topic => addAccordionCard({
        title: topic.title,
        body: getDefaultTextarea(topic.name, striptags(topic.title) + '...', false, topic.name),
    }));

    // accordion.append('<div id="custom-topics"></div>');

    addAccordionCard({
        title: '<%= __('post.topic.new') %>',
        body: `<div class="input-group mb-3">
                    <input type="text" class="form-control" id="newTopicInput" placeholder="<%= __('post.new.topic.input.placeholder') %>">
                    <div class="input-group-append">
                        <button type="button" class="btn btn-outline-secondary" id="newTopicButton"><%= __('post.new.topic.button') %></button>
                    </div>
                </div>
                <div id="accordion">
                    <div id="custom-topics"></div>
                </div>`,
        element: accordion,
        divide: true,
        cardHeaderClass: 'bg-success text-white'
    });

    /* helper methods */
    renameTopic = (topicId) => {
        let topicCard = $('#card-' + topicId);
        let topicHeader = topicCard.find('a');

        saveNewName = (newName) => {
            $.ajax({
                url: '/post/topic/update/' + topicId,
                method: 'POST',
                data: { name: newName },
                success: (topic) => {
                    topicHeader.html(topic.name);
                    topicCard.find('trix-editor').attr('placeholder', topic.name + '...');
                },
                error: (err) => {
                    console.log('error: ' + JSON.stringify(err));
                }
            });
        }

        alertify
        .prompt('<%= __("post.topic.rename") %>', '<%= __("post.topic.rename.dialog.message") %>', topicHeader.html().trim(), (evt, value) => saveNewName(value), () => { /* cancel */ })
        .set('labels', {ok:'<%= __("post.topic.rename.dialog.confirm") %>', cancel:'<%= __("post.topic.dialog.cancel") %>'});
    }

    removeTopic = (topicId) => {
        console.log('removing topic');

        alertify.confirm('<%= __("post.topic.remove") %>', '<%= __("post.topic.remove.dialog.message") %>', 
            () => { $('#' + topicId).remove() },
            () => { /* cancel removing */ }).set('labels', {ok:'<%= __("post.topic.remove.dialog.confirm") %>', cancel:'<%= __("post.topic.dialog.cancel") %>'});
        
    }

    /* interactions */
    $('#newTopicInput').on('keyup', function (e) {
        if (e.keyCode == 13) {
            $('#newTopicButton').click();
        }
    });

    $('#newTopicInput').keypress(function (e) {
        if (e.which == 13) {
            $('#newTopicButton').click();
            return false;
        }
    });

    $('#newTopicButton').click(() => {
        const newTopicInput = $('#newTopicInput');

        if(newTopicInput.val()) {
            let newTopicName = striptags(newTopicInput.val());

            $.post('/post/topic/create_custom', { name: newTopicName }).done((topic) => {
                addAccordionCard({
                    title: topic.name,
                    body: getDefaultTextarea(topic._id, topic.name + '...', false, topic._id),
                    id: topic._id,
                    element: $('#custom-topics'),
                    postTitleHTML: `<button type="button" class="btn btn-outline-danger float-right" onclick="removeTopic('${topic._id}')"><i class="fas fa-trash-alt mr-1"></i><%= __('post.topic.remove') %></button>
                                    <button type="button" class="btn btn-outline-info float-right mr-1" onclick="renameTopic('${topic._id}')"><i class="fas fa-edit mr-1"></i><%= __('post.topic.rename') %></button>`
                });

                $('#custom-topics').children('.card').children('.collapse').removeClass('show');
                $('#custom-topics').children('.card').last().children('.collapse').addClass('show');
            });

            newTopicInput.val('');
        }
    });

    /* votes */
    addAccordionCard({
        title: '<%= __('post.vote.new') %>',
        body: ` <div class="input-group">
                    <input type="text" class="form-control" id="voteThemeInput" name="voteThemeName" placeholder="<%= __('post.vote.theme.input.placeholder') %>">
                </div>
                <small id="voteThemeError" class="form-text text-danger"></small>
                <hr>
                <div class="input-group">
                    <input type="text" class="form-control" id="addVoteOptionInput" placeholder="<%= __('post.vote.option.input.placeholder') %>">
                    <div class="input-group-append">
                        <button type="button" class="btn btn-outline-secondary" id="addVoteOptionButton"><%= __('post.vote.option.add.button') %></button>
                    </div>
                </div>
                <hr>
                <div id="voteOptions"></div>`,
        element: accordion,
        divide: true,
        cardHeaderClass: 'bg-success text-white',
        id: 'votesCard'
    });

    let voteOptions = $('#voteOptions');
    let addVoteOptionInput = $('#addVoteOptionInput');

    addVoteError = (errorText) => { $('#voteErrors').append(`<div class="alert alert-danger" role="alert">${errorText}</div>`); };
    clearVoteErrors = () => { $('#voteErrors').empty(); };

    makeRequest = (url, data, doneCallback) => {
        $.ajax({
            url: url,
            method: 'post',
            data: data
        }).done(doneCallback).fail((xhr, status) => {
            console.log(status + ': ' + xhr.responseText);
        });
    };

    removeVoteOption = (id) => {
        makeRequest('http://localhost:3000/vote/option/remove/', { id: id }, () => {
            $('#card-' + id).remove();
        });
    };

    generateVoteOptionHTML = (optionValue, optionId) => {
        return `
            <div class="input-group mb-2" id="div-${optionId}">
                <input type="text" class="form-control" id="input-${optionId}" name="${optionId}" value="${optionValue}" placeholder="<%= __('post.vote.option.input.placeholder') %>">
                <div class="input-group-append">
                    <button type="button" class="btn btn-outline-danger" id="removeVoteOptionButton" onclick="removeVoteOption('${optionId}')"><%= __('post.vote.option.remove.button') %></button>
                </div>
            </div>
        `;
    };

    createVoteOption = (name) => {
        makeRequest('http://localhost:3000/vote/option/create/', { name: name }, (id) => {
            console.log('received id: ' + id);
            voteOptions.append(generateVoteOptionHTML(name, id));
            let input = $('#input-' + id);
            input.change(() => {
                makeRequest('http://localhost:3000/vote/option/update/', { id: id, name: input.val() }, (name) => {
                    console.log('current db option name: ' + name);
                });
            });
        });
    };

    addVoteOptionInput.keypress(function (e) {
        if (e.which == 13) {
            $('#addVoteOptionButton').click();
            return false;
        }
    });

    $('#addVoteOptionButton').click(() => {
        if (addVoteOptionInput.val()) {
            createVoteOption(striptags(addVoteOptionInput.val()));

            addVoteOptionInput.val('');

            console.log('adding new vote option');
        }
    });

    $('#post-form').submit(() => {
        if(voteOptions.children().length) {
            if($('#voteThemeInput').val()) return true;
            else {
                if($('.show').length) $('.show').removeClass('show');
                $('#card-votesCard').children('.collapse').first().addClass('show');
                // $('#voteThemeError').html(`<%= __('post.vote.theme.error') %>`);


                $("#voteThemeInput").notify(
                    '<%= __("post.vote.theme.error") %>',
                    {
                        position: 'bottom center',
                        autoHide: true,
                        autoHideDelay: 2500
                    }
                );
                return false;
            }
        } else return true;
    });
</script>

<% include ../partials/editor_preparation.ejs %>
<% include ../partials/footer.ejs %>